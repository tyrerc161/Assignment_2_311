# -*- coding: utf-8 -*-
"""Copy of Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/150q0VMJJv_4KGLq8riXO5LiVSarUrgkO
"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
airlines = pd.read_csv('/content/gdrive/MyDrive/Data/Data/Data/airlines.dat', header=None, names=['Airline ID', 'Name', 'Alias', 'IATA', 'ICAO', 'Callsign', 'Country', 'Active'])
airlines

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
airports = pd.read_csv('/content/gdrive/MyDrive/Data/Data/Data/airports.dat', header=None, names=['Airport ID', 'Name', 'City', 'Country', 'IATA', 'ICAO', 'Latitude', 'Longitude', 'Altitude', 'Timezone', 'DST', 'Tz database time zone', 'Type', 'Source'])
airports

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
countries = pd.read_csv('/content/gdrive/MyDrive/Data/Data/Data/countries.dat', header=None, names=['Name', 'ISO 3166-1 alpha-2 code', 'ISO 3166-1 alpha-3 code'])
countries

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
planes = pd.read_csv('/content/gdrive/MyDrive/Data/Data/Data/planes.dat', header=None, names=['Name', 'IATA', 'ICAO'])
planes

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
routes = pd.read_csv('/content/gdrive/MyDrive/Data/Data/Data/routes.dat', header=None, names=['Airline', 'Airline ID', 'Source airport', 'Source airport ID', 'Destination airport', 'Destination airport ID', 'Codeshare', 'Stops', 'Equipment'])
routes

!pip install streamlit

import streamlit as st

st.title('DISTANCE OF FLIGHTS AROUND THE WORLD')

st.write("This dashboard focusses on investigating the distance between flight routes from countries around the world.")

!pip install geopandas

# map showing airports and borders
import geopandas as gpd
import folium
# Download the Natural Earth data and load it as a GeoDataFrame
from google.colab import drive
drive.mount('/content/drive')

url = '/content/drive/MyDrive/Data/Data/ne_10m_admin_0_countries(Country_Border)'
gdf = gpd.read_file(url)



# Create a map object with cartodbpositron tiles
map = folium.Map(tiles="openstreetmap")

# Loop through the DataFrame and add a marker for each coordinate point
for index, row in airports.iterrows():
    folium.CircleMarker(location=[row['Latitude'], row['Longitude']], radius=0.5, color='black', fill=True, fill_color='black').add_to(map)

# add country boundaries to the map
folium.GeoJson(gdf, name = 'Boundaries').add_to(map)

folium.LayerControl().add_to(map)

# Display the map
map

gdf

# Finding amount of visits per country
# convert the airport ID and source airport ID columns to object type
airports['Airport ID'] = airports['Airport ID'].astype(str)
routes['Source airport ID'] = routes['Source airport ID'].astype(str)
routes['Destination airport ID'] = routes['Destination airport ID'].astype(str)

# merge the airport data with the routes data to get the country for each airport
airport_countries1 = pd.merge(airports[['Airport ID', 'Country']], routes[['Source airport ID', 'Destination airport ID']], left_on='Airport ID', right_on='Source airport ID')

# get the country for the destination airport
airport_countries2 = pd.merge(airport_countries1, airports[['Airport ID', 'Country']], left_on='Destination airport ID', right_on='Airport ID')

# drop any unnecessary columns
airport_countries3 = airport_countries2.drop(columns=['Airport ID_x', 'Source airport ID', 'Destination airport ID', 'Airport ID_y'])

# group by country and count the number of routes
country_counts1 = airport_countries3.groupby('Country_x').count().reset_index()

# merge with the countries data to get the country name and ISO code
country_counts2 = pd.merge(country_counts1, countries[['Name', 'ISO 3166-1 alpha-3 code']], left_on='Country_x', right_on='Name')

# drop any unnecessary columns and rename columns
country_counts3 = country_counts2.drop(columns=['Name']).rename(columns={'Country_x': 'Country Name', 'Country_y': 'Count', 'ISO 3166-1 alpha-3 code': 'ISO 3166-1 alpha-3 code'})

# sort by the number of visits in descending order
country_counts = country_counts3.sort_values(by='Count', ascending=False)

# print the resulting dataframe
country_counts

# Choropleth map example
url = (
    "https://raw.githubusercontent.com/python-visualization/folium/main/examples/data"
)
state_geo = f"{url}/us-states.json"
state_unemployment = f"{url}/US_Unemployment_Oct2012.csv"
state_data = pd.read_csv(state_unemployment)

m = folium.Map(location=[48, -102], zoom_start=3)

folium.Choropleth(
    geo_data=state_geo,
    name="choropleth",
    data=state_data,
    columns=["State", "Unemployment"],
    key_on="feature.id",
    fill_color="YlGn",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Unemployment Rate (%)",
).add_to(m)

folium.LayerControl().add_to(m)

m

!pip install geopandas

!pip install fuzzywuzzy

!pip install python-Levenshtein

import geopandas as gpd
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

# Download the Natural Earth data and load it as a GeoDataFrame
from google.colab import drive
drive.mount('/content/drive')

url = '/content/drive/MyDrive/Data/Data/ne_10m_admin_0_countries(Country_Border)'
gdf = gpd.read_file(url)

# define a function to match country names
def match_country_name(name, choices):
    """Returns the closest match for the given name from a list of choices."""
    return process.extractOne(name, choices, scorer=fuzz.token_set_ratio)[0]

# merge datasets based on country name
country_counts['country_match'] = country_counts['Country Name'].apply(lambda x: match_country_name(x, gdf['SOVEREIGNT'].unique()))
gdf['country_match'] = gdf['SOVEREIGNT'].apply(lambda x: match_country_name(x, country_counts['Country Name'].unique()))
merged_df = pd.merge(country_counts, gdf, left_on='country_match', right_on='SOVEREIGNT', how='outer')

# merged_df = merged_df.drop_duplicates(subset='Country Name', keep='first')
# merged_df = merged_df.dropna(subset=['Count'])
merged_df = merged_df.loc[:, ['Country Name', 'Count', 'geometry']]
merged_df = merged_df.sort_values('Count', ascending=False)


# Create a Folium map centered at (0, 0) and add the Natural Earth boundaries as a GeoJSON layer
map = folium.Map(location=[0, 0], zoom_start=1.2)
folium.GeoJson(gdf, name = 'Country Border').add_to(map)

folium.LayerControl().add_to(map)

# Display the map
map

merged_df

# Top 10 most used airlines
routes['Airline ID'] = routes['Airline ID'].astype(str)
airlines['Airline ID'] = airlines['Airline ID'].astype(str)
airlines['Name'] = airlines['Name'].astype(str)

# merge the routes and airlines data to get the airline names
route_airlines = pd.merge(routes, airlines[['Airline ID', 'Name']], left_on='Airline ID', right_on='Airline ID')

# group the airlines by name and count the number of routes
airline_counts = route_airlines.groupby('Name').size().reset_index(name='Count')

# sort the airlines by the number of routes
airline_counts_sorted = airline_counts.sort_values('Count', ascending=False)

# add a column with the percentage of flights out of the total flights
total_flights = airline_counts_sorted['Count'].sum()
airline_counts_sorted['Percentage'] = airline_counts_sorted['Count'].apply(lambda x: (x/total_flights)*100)

# display the top 10 airlines by number of routes
airline_counts_sorted.head(10)

import matplotlib.pyplot as plt

# create a histogram of the number of routes per airline
plt.hist(airline_counts['Count'], bins=10)

# set the title and labels for the histogram
plt.title('Distribution of Routes per Airline')
plt.xlabel('Number of Routes')
plt.ylabel('Number of Airlines')

# display the histogram
plt.show()

# Top 10 most used airports
# merge the data on the airport and route IDs
airport_routes = pd.merge(airports[['Airport ID', 'Name']], routes[['Source airport ID', 'Destination airport ID']], left_on='Airport ID', right_on='Source airport ID')
airport_routes = pd.merge(airport_routes, airports[['Airport ID', 'Name']], left_on='Destination airport ID', right_on='Airport ID')
airport_routes.drop(columns=['Source airport ID', 'Destination airport ID', 'Airport ID_x', 'Airport ID_y'], inplace=True)
airport_routes.rename(columns={'Name_x': 'Source airport', 'Name_y': 'Destination airport'}, inplace=True)

# group the data by airport and count the number of routes
airport_counts = airport_routes.groupby(['Source airport']).count().reset_index()
airport_counts.rename(columns={'Destination airport': 'Count'}, inplace=True)

# sort the data by the number of routes and select the top 10 airports
top_airports = airport_counts.sort_values(by='Count', ascending=False)

# add a column that displays the percentage of flights out of the total flights
total_flights = top_airports['Count'].sum()
top_airports['Percentage'] = top_airports['Count'] / total_flights * 100
top_airports.rename(columns = {'Source airport':'Airport Name'}, inplace = True)
# display the top 10 airports
top_airports.head(10)

# Top 10 most visited country
# merge the airport data with the routes data to get the country for each airport
airport_count = pd.merge(airports[['Airport ID', 'Country']], routes[['Source airport ID', 'Destination airport ID']], left_on='Airport ID', right_on='Source airport ID')

# get the country for the destination airport
airport_count = pd.merge(airport_count, airports[['Airport ID', 'Country']], left_on='Destination airport ID', right_on='Airport ID')

# drop any unnecessary columns
airport_count = airport_count.drop(columns=['Airport ID_x', 'Source airport ID', 'Destination airport ID', 'Airport ID_y'])

# group by country and count the number of routes
country_count = airport_count.groupby('Country_x').count().reset_index()

# merge with the countries data to get the country name and ISO code
country_count = pd.merge(country_count, countries[['Name', 'ISO 3166-1 alpha-3 code']], left_on='Country_x', right_on='Name')

# drop any unnecessary columns and rename columns
country_count = country_count.drop(columns=['Name', 'ISO 3166-1 alpha-3 code']).rename(columns={'Country_x': 'Country Name', 'Country_y': 'Count'})

# sort by the number of visits in descending order
country_count = country_count.sort_values(by='Count', ascending=False)

# add a column that displays the percentage of visitors out of the total visitors
total_visitors = country_count['Count'].sum()
country_count['Percentage'] = country_count['Count'] / total_visitors * 100

# print the resulting dataframe
country_count.head(10)

import matplotlib.pyplot as plt

# create a horizontal bar chart
plt.barh(country_count['Country Name'].head(10), country_count['Count'].head(10))

# add a title and axis labels
plt.title('Top 10 Most Visited Countries')
plt.xlabel('Number of Visits')
plt.ylabel('Country')

# display the plot
plt.show()

# Top 10 most used routes
# merge the route data with the airport data to get the source and destination airport names
routes_with_names = pd.merge(routes, airports[['IATA', 'Name']], left_on='Source airport', right_on='IATA', how='left')
routes_with_names = pd.merge(routes_with_names, airports[['IATA', 'Name']], left_on='Destination airport', right_on='IATA', how='left', suffixes=('_source', '_destination'))

# group routes by source and destination airport names and count the number of routes for each pair
route_counts = routes_with_names.groupby(['Name_source', 'Name_destination']).size().reset_index(name='Count')

# sort the routes by count in descending order
top_routes = route_counts.sort_values(by='Count', ascending=False)

# Rename columns
top_routes.rename(columns = {'Name_source':'Strarting Airport','Name_destination':'Destination Airport'}, inplace = True)

# add a column that displays the percentage of routes out of the total routes
total_routes = top_routes['Count'].sum()
top_routes['Percentage'] = top_routes['Count'] / total_routes * 100

# display the top routes with their counts
top_routes[['Strarting Airport', 'Destination Airport', 'Count','Percentage']].head(10)

# Most used planes
# merge the route data with the planes data to get the plane names
routes_with_planes = pd.merge(routes, planes[['ICAO', 'Name']], left_on='Equipment', right_on='ICAO', how='left')

# group routes by plane name and count the number of routes for each plane
plane_counts = routes_with_planes.groupby('Name').size().reset_index(name='Count')

# sort the planes by count in descending order
top_planes = plane_counts.sort_values(by='Count', ascending=False)

# add a column that displays the percentage of planes used out of the total planes used
total_planes = top_planes['Count'].sum()
top_planes['Percentage'] = top_planes['Count'] / total_planes * 100

# Rename columns
top_planes.rename(columns = {'Name':'Airplane Name'}, inplace = True)

# display the top planes with their counts
top_planes[['Airplane Name', 'Count','Percentage']].head(10)

# Map showing distance between two airports
import pandas as pd
import folium
from folium.plugins import MeasureControl

# create a map centered on the US
m = folium.Map(location=[0, 0], zoom_start=2, min_zoom=2,tiles="openstreetmap")

# add markers for all airports
for index, row in airports.iterrows():
    folium.CircleMarker(location=[row['Latitude'], row['Longitude']], popup=row['Name'] + ' (' + row['IATA'] + ')', radius=1, color='black', fill=True, fill_color='black').add_to(m)

# define feature groups for markers and polyline
marker_group = folium.FeatureGroup(name='Markers')
polyline_group = folium.FeatureGroup(name='Polyline')

# add feature groups to the map
marker_group.add_to(m)
polyline_group.add_to(m)

# define a callback function for the map click event
def on_map_click(event):
    global airport1, airport2
    if airport1 is None:
        airport1 = airports[(airports['Latitude'] == event.latlng[0]) & (airports['Longitude'] == event.latlng[1])].iloc[0]
        folium.Marker([airport1['Latitude'], airport1['Longitude']], popup=airport1['Name'] + ' (' + airport1['IATA'] + ')', icon=folium.Icon(color='blue')).add_to(marker_group)
    elif airport2 is None:
        airport2 = airports[(airports['Latitude'] == event.latlng[0]) & (airports['Longitude'] == event.latlng[1])].iloc[0]
        folium.Marker([airport2['Latitude'], airport2['Longitude']], popup=airport2['Name'] + ' (' + airport2['IATA'] + ')', icon=folium.Icon(color='red')).add_to(marker_group)
        folium.PolyLine(locations=[(airport1['Latitude'], airport1['Longitude']), (airport2['Latitude'], airport2['Longitude'])], color='red').add_to(polyline_group)
        airport1 = None
        airport2 = None

        # add the feature groups to the map
        marker_group.add_to(m)
        polyline_group.add_to(m)

# define variables to store selected airports
airport1 = None
airport2 = None

# add a measure control to the map
m.add_child(MeasureControl())

# add layer control to the map
folium.LayerControl().add_to(m)

m